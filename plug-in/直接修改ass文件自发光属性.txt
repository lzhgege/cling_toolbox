import os
import pymel.core as pm

# 获取当前选择的aistandin节点
selected_node = pm.ls(selection=True)[0]

# 获取aistandin节点的ass路径
ass_path = pm.getAttr(selected_node.dso)

# 复制ass文件并重命名
new_ass_path = ass_path[:-5] + 'E' + ass_path[-4:]
pm.sysFile(ass_path, copy=new_ass_path)

# 在ass文件中查找连接自发光贴图的材质球
with open(new_ass_path, 'r+') as file:
    content = file.readlines()

    shader_start_line = None
    emission_color_line = None

    for idx, line in enumerate(content):
        if 'standard_surface' in line:
            shader_start_line = idx
        elif 'emission_color' in line and shader_start_line is not None:
            emission_color_line = idx
            break

    # 如果找到了包含"standard_surface"和"emission_color"的行，则判断是否为贴图连接
    if shader_start_line is not None and emission_color_line is not None:
        content.insert(emission_color_line + 1, '\nemission 1\n')

    # 将修改后的内容写入ass文件
    file.seek(0)
    file.writelines(content)
    file.truncate()

# 更新aistandin节点的ass路径
pm.setAttr(selected_node.dso, new_ass_path, type="string")
